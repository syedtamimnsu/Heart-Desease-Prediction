# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VeupbOpK5l69teCrdBu6aEwGjwlBn46g

Import the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""data cillection and analysis"""

#loading the dataset
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

diabetes_dataset.head( )

#number of rows and columns
diabetes_dataset.shape

#statistical measures of the dataset
diabetes_dataset.describe( )

"""outcomes values count
Diabetes --> 1
Non_diabetes --> 0
"""

diabetes_dataset['Outcome'].value_counts( )

diabetes_dataset.groupby('Outcome').mean( )

#separating data and lebels
X = diabetes_dataset.drop(columns= 'Outcome', axis=1)
Y = diabetes_dataset['Outcome']

print(X )

print(Y )

"""Data standalization"""

scaler = StandardScaler( )

scaler.fit(X)

standrardized_data = scaler.transform(X)

print(standrardized_data )

X = standrardized_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Training Model"""

classifier = svm.SVC(kernel = 'linear')

#training the support vector machine classifier
classifier.fit(X_train, Y_train)

"""Model Evaluation
Accuracy Score
"""

#accuracy score of the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data: ', training_data_accuracy)

#accuracy score of the test data
X_test_prediction = classifier.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the testing data: ', testing_data_accuracy)

"""Making a presictive system"""

input_data = (1,103,30,38,83,43.3,0.183,33)

#changing the input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array as we predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standardize the input data
std_data = scaler.transform(input_data_reshaped)
print('standalizide data:')
print(std_data)

prediction = classifier.predict(std_data)
print('prediction')
print(prediction)

if (prediction[0]==0):
  print('the person has not diabetes')
else:
  print('the persin has diabetes')